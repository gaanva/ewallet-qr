{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DeviceCodeFlowService {\n  //private bckndUrl = \"http://localhost:3010\";\n  constructor(http) {\n    this.http = http;\n    this.bckndUrl = \"https://qrcode.fly.dev\";\n  }\n  /*\n  Este metodo como respuesta me daria esto:\n  {\n  \"device_code\": \"Ag_EE...ko1p\",\n  \"user_code\": \"QTZL-MCBW\",\n  \"verification_uri\": \"https://accounts.acmetest.org/activate\",\n  \"verification_uri_complete\": \"https://accounts.acmetest.org/activate?user_code=QTZL-MCBW\",\n  \"expires_in\": 900,\n  \"interval\": 5\n  }\n  */\n  getQRCodeURL() {\n    //configurar las llamadas al Authserver para poder obtener la URL con el device code correspondiente.\n    const headers = new HttpHeaders();\n    //headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    //headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");//application/json\n    headers.set(\"Content-Type\", \"application/json\");\n    //headers.set(\"Access-Control-Allow-Origin\", \"http://localhost:4200\");\n    //headers.set(\"Access-Control-Allow-Headers\", \"*\");\n    //headers.set(\"Access-Control-Request-Method\", \"POST\");\n    //headers.set(\"Cross-Origin-Resource-Policy\", \"cross-origin\");\n    const data = {\n      \"client_id\": 'I78jUikVML0PzkMCLxzUycY29pwlWo4c',\n      \"scope\": 'pagar:qr',\n      \"audience\": 'https://my-ewallet.com'\n    };\n    /*const client_id = \"I78jUikVML0PzkMCLxzUycY29pwlWo4c\";\n    const scope = \"https://my-ewallet.com\";\n    const audience =  \"pagar:qr\";\n    const data = `client_id=${client_id}&scope=${scope}&audience=${audience}`;*/\n    return this.http.get(this.bckndUrl + \"/getQrCode\");\n    //return this.http.get<any>(\"http://localhost:3010/getQrCode\");\n    //return this.http.post<any>(\"https://gav-test.us.auth0.com/oauth/device/code\", data, {headers});\n  }\n  /*\n  * just for testing purposes, simulating the auto-call from the server side obtaining the token\n  * once the user authorized and authenticated the device.\n  */\n  obtainToken(deviceCode) {\n    console.log(deviceCode);\n    return this.http.get(this.bckndUrl + \"/getDeviceToken?device_code=\" + deviceCode);\n  }\n  /*\n  * TRy to do a payment using the received token,\n  * calling to my API backend services\n  */\n  makeAPayment(token) {\n    console.log(\"ready to make the payment\");\n    //would use interceptors, but it is a ease use case...\n    const headers = new HttpHeaders();\n    headers.set('Authorization', token);\n    const body = {\n      \"price\": \"1000\",\n      \"product\": \"103 plato de comida\",\n      \"Quantity\": \"1\",\n      \"Origin\": \"The Totem\"\n    };\n    return this.http.post(this.bckndUrl + \"/makePayment\", body, {\n      headers\n    });\n  }\n}\nDeviceCodeFlowService.ɵfac = function DeviceCodeFlowService_Factory(t) {\n  return new (t || DeviceCodeFlowService)(i0.ɵɵinject(i1.HttpClient));\n};\nDeviceCodeFlowService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DeviceCodeFlowService,\n  factory: DeviceCodeFlowService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}